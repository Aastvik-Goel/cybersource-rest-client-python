# coding: utf-8

{{>partial_header}}

{{#models}}
{{#model}}
from pprint import pformat
from six import iteritems
import re


class {{classname}}(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

{{#allowableValues}}
    """
    allowed enum values
    """
{{#enumVars}}
    {{name}} = {{{value}}}
{{/enumVars}}
{{/allowableValues}}

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        {{#vars}}'{{name}}': '{{{datatype}}}'{{#hasMore}},
        {{/hasMore}}{{/vars}}
    }

    attribute_map = {
        {{#vars}}'{{name}}': '{{baseName}}'{{#hasMore}},
        {{/hasMore}}{{/vars}}
    }

    def __init__(self{{#vars}}, {{name}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{/vars}}):
        """
        {{classname}} - a model defined in Swagger
        """

{{#vars}}
        self._{{name}} = None
{{/vars}}

{{#vars}}
{{#required}}
        self.{{name}} = {{name}}
{{/required}}
{{^required}}
        if {{name}} is not None:
          self.{{name}} = {{name}}
{{/required}}
{{/vars}}

{{#vars}}
    @property
    def {{name}}(self):
        """
        Gets the {{name}} of this {{classname}}.
{{#description}}        
        {{{description}}}
{{/description}}

        :return: The {{name}} of this {{classname}}.
        :rtype: {{datatype}}
        """
        return self._{{name}}

    @{{name}}.setter
    def {{name}}(self, {{name}}):
        """
        Sets the {{name}} of this {{classname}}.
{{#description}}
        {{{description}}}
{{/description}}

        :param {{name}}: The {{name}} of this {{classname}}.
        :type: {{datatype}}
        """
{{#isEnum}}
{{#isContainer}}
        allowed_values = [{{#allowableValues}}{{#values}}{{#items.isString}}"{{/items.isString}}{{{this}}}{{#items.isString}}"{{/items.isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
{{#isListContainer}}
        if not set({{{name}}}).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `{{{name}}}` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set({{{name}}})-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )
{{/isListContainer}}
{{#isMapContainer}}
        if not set({{{name}}}.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `{{{name}}}` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set({{{name}}}.keys())-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )
{{/isMapContainer}}
{{/isContainer}}
{{^isContainer}}
        allowed_values = [{{#allowableValues}}{{#values}}{{#isString}}"{{/isString}}{{{this}}}{{#isString}}"{{/isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
        if {{{name}}} not in allowed_values:
            raise ValueError(
                "Invalid value for `{{{name}}}` ({0}), must be one of {1}"
                .format({{{name}}}, allowed_values)
            )
{{/isContainer}}
{{/isEnum}}
{{^isEnum}}
{{/isEnum}}

        self._{{name}} = {{name}}

{{/vars}}
    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, {{classname}}):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
{{/model}}
{{/models}}
